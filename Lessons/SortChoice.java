package Lessons;

// Сортировки массивов

/*Сортировка выбором - начинаем с первого элемента под индексом 0 и по порядку ищем элементы меньше, 
запоминаем индекс и смотрим есть ли меньше, когда находи наименьший меняем 2 элемента местами и тд
до тех пор пока 2 последних числа не соравнятся друг с другом и не выстроятся в правильную цепочку

Тк есть 2 вложенных цикла for данная сортировка является квадратичной по сложности -  O(n^2)*/

public class SortChoice {

    public static void main(String[] args) {
        int[] array = new int[]{22, 2, 51, 8, 1, 9, 2, 3, 6, 8, 5};  // заводим массив на 11 чисел

        directSort(array); // вызываем нашу функцию

        for (int i = 0; i < array.length; i++){
            System.out.print(array[i] + " ");
        }
        
    }

    public static void directSort(int[] array){

        for (int i = 0; i < array.length - 1; i++){
            int minPosition = i;  // нам нужно сравнить элемент i со всеми остальными для этого создаем еще один цикл for 
            for(int j = i + 1; j < array.length; j++){  // говорим, что будем считать от i + 1 те элементы после индекса i, и здесь мы используем последний элемент
                if(array[j] < array[minPosition]){                // сравниваем элемент j с минимальной позицией, если мы нашли элемент меньше чем лежит в minPosition,
                // то меняем на новую
                minPosition = j;
                }
            }
            if (i != minPosition){    // если начальная позиция не равна минимальной позиции, то мы производим обмен
                int temp = array[i];
                array[i] = array[minPosition];
                array[minPosition] = temp; 
            }
        }
    }
}

